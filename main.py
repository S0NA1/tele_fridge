import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, CommandObject
from aiogram.types import Message, CallbackQuery
from config import BOT_TOKEN
import datetime
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import sqlite3
import kbs
import logging
from fnmatch import *
from typing import Any, Awaitable, Callable, Dict
from aiogram import BaseMiddleware
from aiogram.types import TelegramObject
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

con = sqlite3.connect("product_db.db")
cur = con.cursor()

cur.execute('''
CREATE TABLE IF NOT EXISTS Users (
id INTEGER NOT NULL,
product TEXT,
data TEXT)
''')
con.commit()
bot = Bot(BOT_TOKEN)
dp = Dispatcher()
logging.basicConfig(level=logging.INFO, filename="loggs.log", filemode="w",
                    format="%(asctime)s %(levelname)s %(message)s")

logger = logging.getLogger(__name__)


# COMMANDS
@dp.message(Command("help"))
async def help_me(messege: Message):
    await messege.answer('''–ß—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –≤—ã–±–µ—Ä–µ—Ç–µ –≤ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥—É 
‚û°Ô∏è–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞

–ß—Ç–æ–±—ã —Å–∫—Ä—ã—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É 
‚û°Ô∏è–ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞

–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∏ –¥–∞–Ω–Ω—ã–µ –Ω–∞–≤—Å–µ–≥–¥–∞, –≤—ã –º–æ–¥–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–≤—É–º—è —Å–ø–æ—Å–æ–±–∞–º–∏:
‚û°Ô∏è–∫–æ–º–∞–Ω–¥–∞ –£–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞
‚û°Ô∏è–∫–Ω–æ–ø–∫–∞ –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
‚ÄºÔ∏è–î–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—Å—è‚ÄºÔ∏è''', reply_markup=kbs.start_key)


async def send_message(bot: Bot, message: int, user_id: int):
    chek = cur.execute("SELECT product, data FROM Users WHERE id = ?", (message,)).fetchall()
    con.commit()
    now_data = datetime.datetime.now().date()
    tre_days = []
    week_days = []
    for i in chek:
        obj_data = str(i[1]).split("-")
        first = datetime.date(int(obj_data[0]), int(obj_data[1]), int(obj_data[2]))
        if int(str(first - now_data).split()[0]) == 3:
            tre_days.append([i[0], i[1]])
        if int(str(first - now_data).split()[0]) == 7:
            week_days.append([i[0], i[1]])
    if len(tre_days) != 0:
        await bot.send_message(chat_id=int(user_id),
                               text=f'''–û—Å—Ç–∞–ª–æ—Å—å —Ç—Ä–∏ –¥–Ω—è –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å—Ä–æ–∫–∞ –≥–æ–¥–Ω–æ—Å—Ç–∏
{pping(tre_days)}''')
    else:
        await bot.send_message(chat_id=int(user_id),
                               text="–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤, —É –∫–æ—Ç–æ—Ä—ã—Ö —Å—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è —á–µ—Ä–µ–∑ 3 –¥–Ω—è")
    if len(week_days) != 0:
        await bot.send_message(chat_id=int(user_id),
                               text=f'''–û—Å—Ç–∞–ª–∞—Å—å –Ω–µ–¥–µ–ª—è –¥–æ –∫–æ–Ω—Ü–∞ —Å—Ä–æ–∫–∞ –≥–æ–¥–Ω–æ—Å—Ç–∏
{pping(week_days)}''')
    else:
        await bot.send_message(chat_id=int(user_id),
                               text="–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤, —É –∫–æ—Ç–æ—Ä—ã—Ö —Å—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é")


@dp.message(Command("open_choice"))
async def open_menu(message: Message):
    await message.answer('''–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –æ—Ç–∫—Ä—ã–ª–æ—Å—å

–ß—Ç–æ–±—ã –∑–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥
‚û°Ô∏è–ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞''', reply_markup=kbs.start_key)


@dp.message(Command("start"))
async def start_menu(message: Message):
    chek = cur.execute("SELECT * FROM Users WHERE id = ?", (message.from_user.id,)).fetchall()
    all_user = cur.execute("SELECT id FROM Users").fetchall()
    con.commit()
    scheduler = AsyncIOScheduler()
    timezone = "Asia/Vladivostok"

    scheduler.add_job(send_message,
                      trigger="cron",
                      hour=17, minute=10,
                      start_date=datetime.datetime.now(),
                      kwargs={
                          "bot": bot,
                          "message": message.from_user.id,
                          "user_id": message.chat.id, }, )
    scheduler.start()
    if len(chek) == 0:
        await message.answer(f'''–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç-—Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫üòä
‚ÄºÔ∏è–í–ù–ò–ú–ê–ù–ò–ï‚ÄºÔ∏è
–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –∫–∞–∫–∏–µ-—Ç–æ –≤–æ–ø—Ä–æ—Å—ã, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /help

–£–¥–∞—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—èüôÇ ''',
                             reply_markup=kbs.start_key)
    else:
        await message.answer(
            '''–í—ã –ø–æ–≤—Ç–æ—Ä–Ω–æ –Ω–∞–∂–∞–ª–∏ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start, –≤–∞—à–∞ —Ä–∞–±–æ—Ç–∞ –≤ –±–æ—Ç–µ –Ω–µ –ø—Ä–µ—Ä–≤–∞–Ω–∞. 
–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π "—É–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"''',
            reply_markup=kbs.start_key)


@dp.message(Command("delete_profile"))
async def delete_datab(message: Message):
    await message.answer(f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∞–≤—Å–µ–≥–¥–∞?üò£",
                         reply_markup=kbs.paginator())


# TEXT COMMANDS
@dp.message(F.text.lower() == "—É–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")
async def delete_datab(message: Message):
    await message.answer(f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∞–≤—Å–µ–≥–¥–∞?üò£",
                         reply_markup=kbs.paginator())


@dp.callback_query(kbs.Pang.filter(F.action.in_(["del", "no_del"])))
async def yes_no_del(call: CallbackQuery, callback_data: kbs.Pang):
    chek = cur.execute("SELECT * FROM Users WHERE id = ?", (call.from_user.id,)).fetchall()
    con.commit()
    now_id = call.from_user.id
    if callback_data.action == "no_del":
        await call.message.answer("–í—ã –Ω–µ —É–¥–∞–ª–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ, –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–∞–±–æ—Ç—É",
                                  reply_markup=kbs.start_key)

    elif len(chek) == 0:
        await call.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –ø–æ—ç—Ç–æ–º—É –º–æ–∂–µ—Ç–µ –Ω–∞—á–∏–Ω–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å–Ω–∞—á–∞–ª–∞",
                                  reply_markup=kbs.write_th)

    elif callback_data.action == "del":
        cur.execute('DELETE FROM Users WHERE id = ?', (now_id,))
        con.commit()
        await call.message.answer(f'''–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã.
        
–ß—Ç–æ–±—ã –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–æ–º–∞–Ω–¥—É
‚û°Ô∏è/start''',
                                  reply_markup=kbs.start_new_profile)


def pping(spis):
    a = ""
    k = 0
    for i in spis:
        k += 1
        a += str(k) + "." + " " + " ".join([i[0], i[1]]) + ";" + "\n"
    return a


@dp.message(F.text.lower() == "—Å–ø–∏—Å–æ–∫ –º–æ–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
async def chek_product(message: Message):
    now_product = cur.execute("SELECT product, data FROM Users WHERE id = ?", (message.from_user.id,)).fetchall()
    con.commit()
    if len(now_product) == 0:
        await message.answer("–í—ã –µ—â–µ –Ω–µ –∑–∞–ø–∏—Å–∞–ª–∏ –≤ —Ç–∞–±–ª–∏—Ü—É –ø—Ä–æ–¥—É–∫—Ç—ã, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–µ–π—á–∞—Å!‚¨áÔ∏è",
                             reply_markup=kbs.write_th)
    else:
        await message.answer(f'''–í–∞—à–∏ –ø—Ä–æ–¥—É–∫—Ç—ã:
{pping(now_product)}''',
                             reply_markup=kbs.start_key)


@dp.message(F.text.lower() == "–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–µ")
async def see_old(messege: Message):
    old_data = cur.execute("SELECT * FROM Users WHERE id = ?", (messege.from_user.id,)).fetchall()
    con.commit()
    now_data = datetime.datetime.now().date()
    convert_result = []
    for i in old_data:
        obj_data = str(i[2]).split("-")
        first = datetime.date(int(obj_data[0]), int(obj_data[1]), int(obj_data[2]))
        if int(str(first - now_data).split()[0]) <= 0:
            convert_result.append([i[1], i[2]])
    if len(convert_result) == 0:
        await messege.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤üå±",
                             reply_markup=kbs.start_key)
    else:
        await messege.answer(f'''–í–∞—à–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã:
{pping(convert_result)}''',
                             reply_markup=kbs.olginator())


@dp.callback_query(kbs.Old.filter(F.action.in_(["out_del", "no_out"])))
async def old_thing(call: CallbackQuery, callback_data: kbs.Old):
    if callback_data.action == "out_del":
        old_data = cur.execute("SELECT * FROM Users WHERE id = ?", (call.from_user.id,)).fetchall()
        con.commit()
        now_data = datetime.datetime.now().date()
        convert_result = []
        if len(old_data) != 0:
            for i in old_data:
                obj_data = str(i[2]).split("-")
                first = datetime.date(int(obj_data[0]), int(obj_data[1]), int(obj_data[2]))
                if int(str(first - now_data).split()[0]) <= 0:
                    convert_result.append([i[1], i[2]])
        for i in convert_result:
            cur.execute("DELETE FROM Users WHERE (product, data) = (?, ?)", (i[0], i[1]))
            con.commit()
        await call.message.answer("–í—Å–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–æ‚úÖ",
                                  reply_markup=kbs.start_key)
    elif callback_data.action == "no_out":
        await call.message.answer("–í—ã –Ω–µ —É–¥–∞–ª–∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–µ, –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–∞–±–æ—Ç—É",
                                  reply_markup=kbs.start_key)


@dp.message(F.text.lower() == "–≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def beck_to_men(messege: Message):
    await messege.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ‚¨áÔ∏è",
                         reply_markup=kbs.start_key)


class Dele(StatesGroup):
    del_object = State()


@dp.message(F.text.lower() == "—É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç")
async def del_norm(message: Message, state: FSMContext):
    now_product = cur.execute("SELECT product, data FROM Users WHERE id = ?", (message.from_user.id,)).fetchall()
    con.commit()
    if len(now_product) > 0:
        await state.set_state(Dele.del_object)
        await message.answer(pping(now_product))
        await message.answer('''–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –µ–≥–æüì≤''')
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–ø–æ–ª–Ω—è—Ç—å —Ç–∞–±–ª–∏—Ü—É‚¨áÔ∏è",
                             reply_markup=kbs.write_th)


@dp.message(Dele.del_object)
async def start_delete(message: Message, state: FSMContext):
    await state.update_data(del_norm=message.text)
    now_product = cur.execute("SELECT id, product, data FROM Users WHERE id = ?",
                              (message.from_user.id,)).fetchall()
    now_work = now_product[int(message.text) - 1]
    cur.execute("DELETE FROM Users WHERE (id, product, data) = (?, ?, ?)", (now_work[0], now_work[1], now_work[2]))
    con.commit()
    await message.answer('''–ü—Ä–æ–¥—É–∫—Ç —É–¥–∞–ª—ë–Ω‚úÖ

–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —á—Ç–æ-—Ç–æ –µ—â—ë, —Å–Ω–æ–≤–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É
‚û° —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç''',
                         reply_markup=kbs.start_key)


class Form(StatesGroup):
    obje = State()
    date = State()


@dp.message(F.text.lower() == "–¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç")
async def fill_db(message: Message, state: FSMContext):
    await state.set_state(Form.obje)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞‚¨áÔ∏è")


@dp.message(Form.obje)
async def name_prod(message: Message, state: FSMContext):
    await state.update_data(obje=message.text)
    await state.set_state(Form.date)
    await message.answer(f'''–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—Ü —Å—Ä–æ–∫–∞ –≥–æ–¥–Ω–æ—Å—Ç–∏ –≤ –≤–∏–¥–µ {datetime.date.today()}
(–≥–æ–¥, –º–µ—Å—è—Ü, —á–∏—Å–ª–æ)‚¨áÔ∏è''')


chis = "0123456789-"


def check_data(n):
    if fnmatch(str(n), "????-??-??"):
        for i in n:
            if i not in chis:
                return 0
        now = n.split("-")
        if int(now[1]) > 12:
            return 0
        if int(now[2]) > 31:
            return 0
        if int(now[1]) == 2 and int(now[2]) > 29:
            return 0
        return 1
    return 0


@dp.message(Form.date)
async def name_da(message: Message, state: FSMContext):
    if check_data(message.text):
        await state.update_data(date=message.text)
        all_data = await state.get_data()
        now = message.from_user.id
        await state.clear()
        i_need = []
        [
            i_need.append(f"{value}")
            for key, value in all_data.items()
        ]
        cur.execute("INSERT INTO Users (id, product, data) VALUES (?, ?, ?)", (now, i_need[0], i_need[1]))
        con.commit()
        await message.answer(f'''–°—É–ø–µ—Ä, –∑–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞üëç
–ß—Ç–æ –¥–∞–ª—å—à–µ?ü§î''',
                             reply_markup=kbs.start_key)

    else:
        while not check_data(message.text):
            await message.reply(f'''–í—ã –≤–≤–µ–ª–∏ –¥–∞—Ç—É –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.üò¢
            
‚ÄºÔ∏è–ü–æ–ø—ã—Ç–∞–π—Ç–µ—Å—å –µ—â–µ —Ä–∞–∑ –≤ —Ñ–æ—Ä–º–∞—Ç–µ {datetime.date.today()}
(–≥–æ–¥, –º–µ—Å—è—Ü, —á–∏—Å–ª–æ)‚¨áÔ∏è''',
                                reply_markup=kbs.back_to_me)
            name_prod()


async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
